version: '3.9'
x-airflow-common:
  &airflow-common
  image: custom-verbose-airflow:1.0.0 #${AIRFLOW_IMAGE_NAME:-apache/airflow:latest}
  # build:
  #  dockerfile: ./Dockerfile
  env_file:
    - .env
  # environment:
    # &airflow-common-env
    #_PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- awscli==1.23.13  numpy==1.20.3 pandas==1.3.4 requests==2.26.0}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/airflow/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/scripts:/opt/airflow/scripts
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:latest
    container_name: af-postgres
    restart: on-failure
    ports:
      - '${POSTGRES_SERVER}:5432:5432'
    env_file:
      - ./.env
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/data/pg-sql:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: af-redis
    expose:
      - 6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    container_name: af-webserver
    <<: *airflow-common
    command: airflow webserver
    ports:
      - 8080:8080
    healthcheck:
      test: [ "CMD", "curl", "--fail", "${AIRFLOW__WEBSERVER__BASE_URL}/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    container_name: af-scheduler
    <<: *airflow-common
    command: airflow scheduler
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker-1:
    container_name: af-worker-1
    <<: *airflow-common
    command: celery worker -H airflow_worker_1
    healthcheck:
      test: ["CMD-SHELL", 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@airflow_worker_1"']
      interval: 10s
      timeout: 10s
      retries: 5
    env_file:
      - ./.env
    environment:
      # <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    ports:
      - "8081:8080"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker-2:
    container_name: af-worker-2
    <<: *airflow-common
    command: celery worker -H airflow_worker_2
    healthcheck:
      test: [ "CMD-SHELL", 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@airflow_worker_2"']
      interval: 10s
      timeout: 10s
      retries: 5
    env_file:
      - ./.env
    environment:
      # <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    ports:
      - "8082:8080"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    container_name: af-triggerer
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test:
        [ "CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    container_name: af-init
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    env_file:
      - ./.env
    environment:
      # <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _AIRFLOW_WWW_USER_FIRSTNAME: Airflow
      _AIRFLOW_WWW_USER_LASTNAME: Admin
      _AIRFLOW_WWW_USER_EMAIL: airflowadmin@localhost.com
      _AIRFLOW_WWW_USER_ROLE: Admin
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/airflow:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    env_file:
      - ./.env
    environment:
      # <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "4"
    command:
      - bash
      - -c
      - airflow

  airflow-flower:
    container_name: af-flower
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  #airflow-gitsync:
  #  container_name: af-gitsync
  #  image: k8s.gcr.io/git-sync/git-sync:v3.2.2
  #  environment:
  #    - GIT_SYNC_REV=HEAD
  #    - GIT_SYNC_DEPTH=1
  #    - GIT_SYNC_USERNAME=airflow
  #    - GIT_SYNC_MAX_FAILURES=0
  #    - GIT_KNOWN_HOSTS=false
  #    - GIT_SYNC_DEST=repo
  #    - GIT_SYNC_REPO=https://cloudopz.co/devops/airflow-dags.git
  #    - GIT_SYNC_WAIT=60
  #    - GIT_SYNC_TIMEOUT=120
  #    - GIT_SYNC_ADD_USER=true
  #    - GIT_SYNC_PASSWORD=
  #    - GIT_SYNC_ROOT=/dags
  #    - GIT_SYNC_BRANCH=master
  #  volumes:
  #    - /mnt/airflow/dags:/dags
